{"version":3,"file":"commands.min.js","sources":["../src/commands.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * Commands helper for the Moodle tiny_translations plugin.\n *\n * @module      plugintype_pluginname/commands\n * @copyright   2023 Andrew Lyons <andrew@nicols.co.uk>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {getButtonImage} from 'editor_tiny/utils';\nimport {get_string as getString} from 'core/str';\nimport {\n    component,\n    buttonName,\n    icon,\n} from './common';\nimport {getUnusedHash} from './options';\n\nconst getTranslationHash = (translationHash) => {\n    const translationHashElement = document.createElement('span');\n    translationHashElement.dataset.translationhash = translationHash;\n    translationHashElement.setAttribute('name', 'translationhash');\n\n    return translationHashElement;\n};\n\nconst insertTranslationHash = (editor, translationHash) => {\n    const translationHashElement = getTranslationHash(translationHash);\n    editor.getBody().prepend(translationHashElement);\n\n    return translationHashElement;\n};\n\nconst resetTranslationHashElement = (editor, translationHashElement) => {\n    const newTranslationHash = getUnusedHash(editor);\n    const translationHash = translationHashElement?.dataset.translationhash || newTranslationHash;\n\n    const currentHashes = editor.dom.select('span[data-translationhash]');\n    const exists = currentHashes.some((hashElement) => hashElement.dataset.translationhash === translationHash);\n    currentHashes\n        .filter((hashElement) => hashElement.dataset.translationhash !== translationHash)\n        .forEach((hashElement) => editor.dom.remove(hashElement));\n\n    if (!exists) {\n        return insertTranslationHash(editor, translationHash);\n    }\n\n    return exists;\n};\n\n/**\n * Get the setup function for the buttons.\n *\n * This is performed in an async function which ultimately returns the registration function as the\n * Tiny.AddOnManager.Add() function does not support async functions.\n *\n * @returns {function} The registration function to call within the Plugin.add function.\n */\nexport const getSetup = async() => {\n    const [\n        buttonText,\n        buttonImage,\n    ] = await Promise.all([\n        getString('buttontitle', component),\n        getButtonImage('icon', component),\n    ]);\n\n    return (editor) => {\n        // Register the Icon.\n        editor.ui.registry.addIcon(icon, buttonImage.html);\n\n        // Register the Menu Button.\n        editor.ui.registry.addToggleButton(buttonName, {\n            icon,\n            tooltip: buttonText,\n            onAction: () => alert(\"Todo: Show confirmation dialog.\"),\n        });\n\n        if (editor.getElement().id === 'id_substitutetext_editor') {\n            // Do not add tranlation hashes to translations.\n            return;\n        }\n\n        let translationHashElement;\n\n        // Add a handler to set up the translation hash when the content is initialised.\n        editor.on('init', () => {\n            const newTranslationHash = getUnusedHash(editor);\n\n            if (!newTranslationHash) {\n                // There is no translation has to use for this field.\n                return;\n            }\n\n            translationHashElement = editor.getBody().querySelector('[data-translationhash]');\n            // Ensure that the hash element has a name.\n            // This ensures that TinyMCE sees it as non-empty content, and therefore does not remove it.\n            if (translationHashElement) {\n                translationHashElement.setAttribute('name', 'translationhash');\n            } else {\n                translationHashElement = insertTranslationHash(editor, newTranslationHash);\n            }\n        });\n\n        // Add a handler to unset the content if it only contains the translation hash.\n        editor.on('submit', () => {\n            resetTranslationHashElement(editor, translationHashElement);\n            if (editor.getContent() === translationHashElement.outerHTML) {\n                editor.setContent('');\n            }\n            // We must call save here to ensure that the most recent content is saved to the textarea.\n            editor.save();\n        });\n    };\n};\n"],"names":["insertTranslationHash","editor","translationHash","translationHashElement","document","createElement","dataset","translationhash","setAttribute","getTranslationHash","getBody","prepend","async","buttonText","buttonImage","Promise","all","component","ui","registry","addIcon","icon","html","addToggleButton","buttonName","tooltip","onAction","alert","getElement","id","on","newTranslationHash","querySelector","currentHashes","dom","select","exists","some","hashElement","filter","forEach","remove","resetTranslationHashElement","getContent","outerHTML","setContent","save"],"mappings":";;;;;;;;MAwCMA,sBAAwB,CAACC,OAAQC,yBAC7BC,uBATkBD,CAAAA,wBAClBC,uBAAyBC,SAASC,cAAc,eACtDF,uBAAuBG,QAAQC,gBAAkBL,gBACjDC,uBAAuBK,aAAa,OAAQ,mBAErCL,wBAIwBM,CAAmBP,wBAClDD,OAAOS,UAAUC,QAAQR,wBAElBA,0CA4BaS,gBAEhBC,WACAC,mBACMC,QAAQC,IAAI,EAClB,mBAAU,cAAeC,oBACzB,yBAAe,OAAQA,4BAGnBhB,YAEJA,OAAOiB,GAAGC,SAASC,QAAQC,aAAMP,YAAYQ,MAG7CrB,OAAOiB,GAAGC,SAASI,gBAAgBC,mBAAY,CAC3CH,KAAAA,aACAI,QAASZ,WACTa,SAAU,IAAMC,MAAM,qCAGK,6BAA3B1B,OAAO2B,aAAaC,cAKpB1B,uBAGJF,OAAO6B,GAAG,QAAQ,WACRC,oBAAqB,0BAAc9B,QAEpC8B,qBAKL5B,uBAAyBF,OAAOS,UAAUsB,cAAc,0BAGpD7B,uBACAA,uBAAuBK,aAAa,OAAQ,mBAE5CL,uBAAyBH,sBAAsBC,OAAQ8B,wBAK/D9B,OAAO6B,GAAG,UAAU,KAxEQ,EAAC7B,OAAQE,gCACnC4B,oBAAqB,0BAAc9B,QACnCC,iBAAkBC,MAAAA,8BAAAA,uBAAwBG,QAAQC,kBAAmBwB,mBAErEE,cAAgBhC,OAAOiC,IAAIC,OAAO,8BAClCC,OAASH,cAAcI,MAAMC,aAAgBA,YAAYhC,QAAQC,kBAAoBL,kBAC3F+B,cACKM,QAAQD,aAAgBA,YAAYhC,QAAQC,kBAAoBL,kBAChEsC,SAASF,aAAgBrC,OAAOiC,IAAIO,OAAOH,eAE3CF,QACMpC,sBAAsBC,OAAQC,kBA8DjCwC,CAA4BzC,OAAQE,wBAChCF,OAAO0C,eAAiBxC,uBAAuByC,WAC/C3C,OAAO4C,WAAW,IAGtB5C,OAAO6C"}