{"version":3,"file":"commands.min.js","sources":["../src/commands.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * Commands helper for the Moodle tiny_translations plugin.\n *\n * @module      tiny_translations/commands\n * @copyright   2023 Andrew Lyons <andrew@nicols.co.uk>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {getButtonImage} from 'editor_tiny/utils';\nimport {get_string as getString} from 'core/str';\nimport {handleAction} from './ui';\nimport {\n    component,\n    buttonName,\n    icon,\n} from './common';\nimport {getUnusedHash} from './options';\n\n/**\n * Get the setup function for the buttons.\n *\n * This is performed in an async function which ultimately returns the registration function as the\n * Tiny.AddOnManager.Add() function does not support async functions.\n *\n * @returns {function} The registration function to call within the Plugin.add function.\n */\nexport const getSetup = async() => {\n    const [\n        buttonText,\n        buttonImage,\n    ] = await Promise.all([\n        getString('buttontitle', component),\n        getButtonImage('icon', component),\n    ]);\n\n    return (editor) => {\n        // Register the Icon.\n        editor.ui.registry.addIcon(icon, buttonImage.html);\n\n        // Register the Menu Button.\n        editor.ui.registry.addToggleButton(buttonName, {\n            icon,\n            tooltip: buttonText,\n            onAction: () => handleAction(editor),\n        });\n\n        if (editor.getElement().id === 'id_substitutetext_editor') {\n            // Do not add tranlation hashes to translations.\n            return;\n        }\n\n        let translationHashElement;\n\n        // Add a handler to set up the translation hash when the content is initialised.\n        editor.on('init', () => {\n            const newTranslationHash = getUnusedHash(editor);\n\n            if (!newTranslationHash) {\n                // There is no translation hash to use for this field.\n                return;\n            }\n\n            translationHashElement = editor.getBody().querySelector('[data-translationhash]');\n            // Ensure that the hash span element is warpped in a <p> tag, with appropriate 'class' applied.\n            if (translationHashElement) {\n                // translationHashElement.setAttribute('name', 'translationhash');\n\n                let parentBlock = translationHashElement.parentElement;\n                parentBlock.setAttribute('class', 'translationhash'); // Set a class so that we make this \"hidden\".\n            } else {\n                translationHashElement = document.createElement('span');\n                translationHashElement.dataset.translationhash = newTranslationHash;\n                // translationHashElement.setAttribute('name', 'translationhash');\n\n                // Add a parent block with our own 'class' applied. Otherwise editor will add one automatically.\n                let parentBlock = document.createElement('p');\n                parentBlock.setAttribute('class', 'translationhash');\n                parentBlock.appendChild(translationHashElement);\n\n                editor.getBody().prepend(parentBlock);\n\n                // editor.getBody().prepend(translationHashElement);\n            }\n        });\n\n        // Add a handler to unset the content if it only contains the translation hash.\n        editor.on('submit', () => {\n            if (editor.getContent() === translationHashElement.outerHTML) {\n                editor.setContent('');\n            }\n        });\n    };\n};\n"],"names":["async","buttonText","buttonImage","Promise","all","component","editor","ui","registry","addIcon","icon","html","addToggleButton","buttonName","tooltip","onAction","getElement","id","translationHashElement","on","newTranslationHash","getBody","querySelector","parentElement","setAttribute","document","createElement","dataset","translationhash","parentBlock","appendChild","prepend","getContent","outerHTML","setContent"],"mappings":"qQAyCwBA,gBAEhBC,WACAC,mBACMC,QAAQC,IAAI,EAClB,mBAAU,cAAeC,oBACzB,yBAAe,OAAQA,4BAGnBC,YAEJA,OAAOC,GAAGC,SAASC,QAAQC,aAAMR,YAAYS,MAG7CL,OAAOC,GAAGC,SAASI,gBAAgBC,mBAAY,CAC3CH,KAAAA,aACAI,QAASb,WACTc,SAAU,KAAM,oBAAaT,UAGF,6BAA3BA,OAAOU,aAAaC,cAKpBC,uBAGJZ,OAAOa,GAAG,QAAQ,WACRC,oBAAqB,0BAAcd,WAEpCc,sBAKLF,uBAAyBZ,OAAOe,UAAUC,cAAc,0BAEpDJ,uBAAwB,CAGNA,uBAAuBK,cAC7BC,aAAa,QAAS,uBAC/B,CACHN,uBAAyBO,SAASC,cAAc,QAChDR,uBAAuBS,QAAQC,gBAAkBR,uBAI7CS,YAAcJ,SAASC,cAAc,KACzCG,YAAYL,aAAa,QAAS,mBAClCK,YAAYC,YAAYZ,wBAExBZ,OAAOe,UAAUU,QAAQF,iBAOjCvB,OAAOa,GAAG,UAAU,KACZb,OAAO0B,eAAiBd,uBAAuBe,WAC/C3B,OAAO4B,WAAW"}