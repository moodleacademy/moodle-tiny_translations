{"version":3,"file":"ui.min.js","sources":["../src/ui.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny Replace translation hash.\n *\n * @module      tiny_translations/ui\n * @copyright   2023 Rajneel Totaram <rjnlfj@yahoo.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Modal from 'tiny_translations/modal';\nimport ModalEvents from 'core/modal_events';\nimport ModalFactory from 'core/modal_factory';\nimport {getUnusedHash} from './options';\n\nexport const handleAction = (editor) => {\n    displayDialogue(editor);\n};\n\n/**\n * Get the template context for the dialogue.\n *\n * @param {Editor} editor\n * @param {object} data\n * @returns {object} data\n */\nconst getTemplateContext = (editor, data) => {\n    return Object.assign({}, {\n        elementid: editor.id,\n    }, data);\n};\n\n\nconst displayDialogue = async(editor, data = {}) => {\n    const modal = await ModalFactory.create({\n        type: Modal.TYPE,\n        templateContext: getTemplateContext(editor, data),\n        large: true,\n    });\n    modal.show();\n\n    const $root = modal.getRoot();\n    $root.on(ModalEvents.save, (event, modal) => {\n        handleOK(editor, modal, data);\n    });\n};\n\nconst handleOK = async(editor) => {\n    replaceHash(editor);\n};\n\nconst replaceHash = (editor) => {\n    let initialcontent = editor.getContent();\n\n    // Remove all translation span tags.\n    initialcontent = removeTranslationHashElements(editor, initialcontent);\n\n    editor.setContent(initialcontent);\n    // Add the new translation span tag.\n    insertTranslationHash(editor, getUnusedHash(editor));\n};\n\n/*\n * Create a translation span block, given a translation hash string.\n * The format is: <p class=\"translationhash\"><span data-translationhash=\"xxxx\"></span</p>\n */\nconst getTranslationHashBlock = (translationHash) => {\n    const translationHashElement = document.createElement('span');\n    translationHashElement.dataset.translationhash = translationHash;\n\n    // Add a parent block with our own 'class' applied. Otherwise editor will add a <p> tag automatically.\n    const parentBlock = document.createElement('p');\n    parentBlock.setAttribute('class', 'translationhash');\n    parentBlock.appendChild(translationHashElement);\n\n    return parentBlock;\n};\n\n/*\n * Add the translation span block at the beginning of the content.\n */\nexport const insertTranslationHash = (editor, translationHash) => {\n    const translationHashElement = getTranslationHashBlock(translationHash);\n    editor.getBody().prepend(translationHashElement);\n\n    return translationHashElement;\n};\n\n/*\n * Remove translation span tags.\n */\nexport const removeTranslationHashElements = (editor, content) => {\n    const alltranslationhashregex =\n        /(?:<p>|<p class=\"translationhash\">)\\s*<span\\s*data-translationhash\\s*=\\s*['\"]+([a-zA-Z0-9]+)['\"]+\\s*>\\s*<\\/span>\\s*<\\/p>/g;\n    const emptyptagsregex = /<p\\s*class=\"translationhash\">\\s*<\\/p>/g;\n\n    // Remove the translation span tags.\n    content = content.replaceAll(alltranslationhashregex, \"\");\n\n    // Remove any empty <p class=\"translationhash\"> tags.\n    content = content.replaceAll(emptyptagsregex, \"\");\n\n    return content;\n};\n\nexport const handleOnPaste = (editor, args) => {\n    args.content = removeTranslationHashElements(editor, args.content);\n};\n"],"names":["editor","displayDialogue","getTemplateContext","data","Object","assign","elementid","id","async","modal","ModalFactory","create","type","Modal","TYPE","templateContext","large","show","$root","getRoot","on","ModalEvents","save","event","handleOK","replaceHash","initialcontent","getContent","removeTranslationHashElements","setContent","insertTranslationHash","translationHash","translationHashElement","document","createElement","dataset","translationhash","parentBlock","setAttribute","appendChild","getTranslationHashBlock","getBody","prepend","content","replaceAll","args"],"mappings":";;;;;;;6VA4B6BA,SACzBC,gBAAgBD,eAUdE,mBAAqB,CAACF,OAAQG,OACzBC,OAAOC,OAAO,GAAI,CACrBC,UAAWN,OAAOO,IACnBJ,MAIDF,gBAAkBO,eAAMR,YAAQG,4DAAO,SACnCM,YAAcC,uBAAaC,OAAO,CACpCC,KAAMC,eAAMC,KACZC,gBAAiBb,mBAAmBF,OAAQG,MAC5Ca,OAAO,IAEXP,MAAMQ,aAEAC,MAAQT,MAAMU,UACpBD,MAAME,GAAGC,sBAAYC,MAAM,CAACC,MAAOd,SAC/Be,SAASxB,OAAQS,MAAON,UAI1BqB,SAAWhB,MAAAA,SACbiB,YAAYzB,SAGVyB,YAAezB,aACb0B,eAAiB1B,OAAO2B,aAG5BD,eAAiBE,8BAA8B5B,OAAQ0B,gBAEvD1B,OAAO6B,WAAWH,gBAElBI,sBAAsB9B,QAAQ,0BAAcA,UAsBnC8B,sBAAwB,CAAC9B,OAAQ+B,yBACpCC,uBAhBuBD,CAAAA,wBACvBC,uBAAyBC,SAASC,cAAc,QACtDF,uBAAuBG,QAAQC,gBAAkBL,sBAG3CM,YAAcJ,SAASC,cAAc,YAC3CG,YAAYC,aAAa,QAAS,mBAClCD,YAAYE,YAAYP,wBAEjBK,aAOwBG,CAAwBT,wBACvD/B,OAAOyC,UAAUC,QAAQV,wBAElBA,mFAMEJ,8BAAgC,CAAC5B,OAAQ2C,UASlDA,SAHAA,QAAUA,QAAQC,WAJd,4HAIkD,KAGpCA,WANM,yCAMsB,gGAKrB,CAAC5C,OAAQ6C,QAClCA,KAAKF,QAAUf,8BAA8B5B,OAAQ6C,KAAKF"}