{"version":3,"file":"ui.min.js","sources":["../src/ui.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny Replace translation hash.\n *\n * @module      tiny_translations/ui\n * @copyright   2023 Rajneel Totaram <rjnlfj@yahoo.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Modal from 'tiny_translations/modal';\nimport ModalEvents from 'core/modal_events';\nimport ModalFactory from 'core/modal_factory';\nimport {getUnusedHash} from './options';\n\nexport const handleAction = (editor) => {\n    displayDialogue(editor);\n};\n\n/**\n * Get the template context for the dialogue.\n *\n * @param {Editor} editor\n * @param {object} data\n * @returns {object} data\n */\nconst getTemplateContext = (editor, data) => {\n    return Object.assign({}, {\n        elementid: editor.id,\n    }, data);\n};\n\n\nconst displayDialogue = async(editor, data = {}) => {\n    const modal = await ModalFactory.create({\n        type: Modal.TYPE,\n        templateContext: getTemplateContext(editor, data),\n        large: true,\n    });\n    modal.show();\n\n    const $root = modal.getRoot();\n    $root.on(ModalEvents.save, (event, modal) => {\n        handleOK(editor, modal, data);\n    });\n};\n\nconst handleOK = async(editor) => {\n    replaceHash(editor);\n};\n\nconst replaceHash = (editor) => {\n    const alltranslationhashregex =\n        /(?:<p>|<p class=\"translationhash\">)\\s*<span\\s*data-translationhash\\s*=\\s*['\"]+([a-zA-Z0-9]+)['\"]+\\s*>\\s*<\\/span>\\s*<\\/p>/g;\n\n    const emptyptagsregex = /<p\\s*class=\"translationhash\">\\s*<\\/p>/g;\n\n    let translationhash;\n    let initialcontent = editor.getContent();\n\n    // Remove the old translation span tags.\n    initialcontent = initialcontent.replaceAll(alltranslationhashregex, \"\");\n\n    // Remove any empty <p class=\"translationhash\"> tags.\n    initialcontent = initialcontent.replaceAll(emptyptagsregex, \"\");\n\n    // Add new translation span tag.\n    translationhash = \"<p class=\\\"translationhash\\\"><span data-translationhash=\\\"\" + getUnusedHash(editor) + \"\\\"></span></p>\";\n    // Put the translation span tag first similar to how it is when editor loads with empty content.\n    editor.setContent(translationhash + initialcontent);\n    //editor.insertContent(translationhash + initialcontent);\n\n    // Disable button.\n\n};\n"],"names":["editor","displayDialogue","getTemplateContext","data","Object","assign","elementid","id","async","modal","ModalFactory","create","type","Modal","TYPE","templateContext","large","show","$root","getRoot","on","ModalEvents","save","event","handleOK","replaceHash","translationhash","initialcontent","getContent","replaceAll","setContent"],"mappings":";;;;;;;gQA4B6BA,SACzBC,gBAAgBD,eAUdE,mBAAqB,CAACF,OAAQG,OACzBC,OAAOC,OAAO,GAAI,CACrBC,UAAWN,OAAOO,IACnBJ,MAIDF,gBAAkBO,eAAMR,YAAQG,4DAAO,SACnCM,YAAcC,uBAAaC,OAAO,CACpCC,KAAMC,eAAMC,KACZC,gBAAiBb,mBAAmBF,OAAQG,MAC5Ca,OAAO,IAEXP,MAAMQ,aAEAC,MAAQT,MAAMU,UACpBD,MAAME,GAAGC,sBAAYC,MAAM,CAACC,MAAOd,SAC/Be,SAASxB,OAAQS,MAAON,UAI1BqB,SAAWhB,MAAAA,SACbiB,YAAYzB,SAGVyB,YAAezB,aAMb0B,gBACAC,eAAiB3B,OAAO4B,aAG5BD,eAAiBA,eAAeE,WAR5B,4HAQgE,IAGpEF,eAAiBA,eAAeE,WATR,yCASoC,IAG5DH,gBAAkB,2DAA+D,0BAAc1B,QAAU,gBAEzGA,OAAO8B,WAAWJ,gBAAkBC"}