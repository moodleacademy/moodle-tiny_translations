{"version":3,"file":"ui.min.js","sources":["../src/ui.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny Replace translation hash.\n *\n * @module      tiny_translations/modal\n * @copyright   2023 Rajneel Totaram <rjnlfj@yahoo.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Modal from 'tiny_translations/modal';\nimport ModalEvents from 'core/modal_events';\nimport ModalFactory from 'core/modal_factory';\nimport {getUnusedHash} from './options';\n\nexport const handleAction = (editor) => {\n    displayDialogue(editor);\n};\n\n/**\n * Get the template context for the dialogue.\n *\n * @param {Editor} editor\n * @param {object} data\n * @returns {object} data\n */\nconst getTemplateContext = (editor, data) => {\n    return Object.assign({}, {\n        elementid: editor.id,\n    }, data);\n};\n\n\nconst displayDialogue = async(editor, data = {}) => {\n    const modal = await ModalFactory.create({\n        type: Modal.TYPE,\n        templateContext: getTemplateContext(editor, data),\n        large: true,\n    });\n    modal.show();\n\n    const $root = modal.getRoot();\n    $root.on(ModalEvents.save, (event, modal) => {\n        handleOK(editor, modal, data);\n    });\n};\n\nconst handleOK = async(editor, modal, data) => {\n    replaceHash(editor, modal, data);\n};\n\nconst replaceHash = (editor, modal, data) => {\n    const alltranslationhashpregex = /<p><span name=\"translationhash\" data-translationhash[ ]*=[ ]*[\\'\"]+([a-zA-Z0-9]+)[\\'\"]+[ ]*>[ ]*<\\/span><\\/p>/g;\n    const alltranslationhashregex = /<span name=\"translationhash\" data-translationhash[ ]*=[ ]*[\\'\"]+([a-zA-Z0-9]+)[\\'\"]+[ ]*>[ ]*<\\/span>/g;\n\n    var translationhash;\n\n    var initialcontent = editor.getContent();\n\n    // Remove the old translation span tags.\n    // Replace this so that it doesn't leave behind <p>&nbsp;</p>.\n    initialcontent = initialcontent.replaceAll(alltranslationhashpregex, \"\");\n    // Now replace all other instances.\n    initialcontent = initialcontent.replaceAll(alltranslationhashregex, \"\");\n\n    // Add new translation span tag.\n    translationhash = \"<p><span name=\\\"translationhash\\\" data-translationhash=\\\"\" + getUnusedHash(editor) + \"\\\"></span></p>\";\n    editor.setContent(initialcontent + translationhash);\n    //editor.insertContent(translationhash + initialcontent);\n\n    // Disable button.\n\n};\n"],"names":["editor","displayDialogue","getTemplateContext","data","Object","assign","elementid","id","ModalFactory","create","type","Modal","TYPE","templateContext","large","modal","show","getRoot","on","ModalEvents","save","event","handleOK","replaceHash","translationhash","initialcontent","getContent","replaceAll","setContent"],"mappings":"ujCA4B4B,SAACA,QACzBC,gBAAgBD,wBAUdE,mBAAqB,SAACF,OAAQG,aACzBC,OAAOC,OAAO,GAAI,CACrBC,UAAWN,OAAOO,IACnBJ,OAIDF,iEAAkB,iBAAMD,mJAAQG,gDAAO,mBACrBK,uBAAaC,OAAO,CACpCC,KAAMC,eAAMC,KACZC,gBAAiBX,mBAAmBF,OAAQG,MAC5CW,OAAO,YAHLC,qBAKAC,OAEQD,MAAME,UACdC,GAAGC,sBAAYC,MAAM,SAACC,MAAON,OAC/BO,SAAStB,OAAQe,MAAOZ,kHAI1BmB,2DAAW,kBAAMtB,OAAQe,MAAOZ,8GAClCoB,YAAYvB,OAAQe,MAAOZ,2HAGzBoB,YAAc,SAACvB,OAAQe,MAAOZ,UAI5BqB,gBAEAC,eAAiBzB,OAAO0B,aAM5BD,gBAFAA,eAAiBA,eAAeE,WATC,iHASoC,KAErCA,WAVA,yGAUoC,IAGpEH,gBAAkB,0DAA8D,0BAAcxB,QAAU,gBACxGA,OAAO4B,WAAWH,eAAiBD"}